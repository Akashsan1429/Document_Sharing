{"ast":null,"code":"// API client for document sharing platform\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\";\n\n// JWT Token management\nclass TokenManager {\n  static getToken() {\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"jwt_token\");\n    }\n    return null;\n  }\n  static setToken(token) {\n    if (typeof window !== \"undefined\") {\n      localStorage.setItem(\"jwt_token\", token);\n    }\n  }\n  static removeToken() {\n    if (typeof window !== \"undefined\") {\n      localStorage.removeItem(\"jwt_token\");\n    }\n  }\n  static isTokenExpired(token) {\n    if (!token) return true;\n    try {\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      return payload.exp * 1000 < Date.now();\n    } catch {\n      return true;\n    }\n  }\n  static getUserFromToken(token) {\n    if (!token) return null;\n    try {\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      return payload;\n    } catch {\n      return null;\n    }\n  }\n}\n\n// HTTP client with authentication\nclass ApiClient {\n  static async request(endpoint, options = {}) {\n    const token = TokenManager.getToken();\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options.headers\n      },\n      ...options\n    };\n    if (token && !TokenManager.isTokenExpired(token)) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      if (response.status === 401) {\n        TokenManager.removeToken();\n        window.location.href = \"/login\";\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Request failed\");\n      }\n      return data;\n    } catch (error) {\n      console.error(\"API request failed:\", error);\n      throw error;\n    }\n  }\n  static get(endpoint) {\n    return this.request(endpoint, {\n      method: \"GET\"\n    });\n  }\n  static post(endpoint, data) {\n    return this.request(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    });\n  }\n  static put(endpoint, data) {\n    return this.request(endpoint, {\n      method: \"PUT\",\n      body: JSON.stringify(data)\n    });\n  }\n  static delete(endpoint) {\n    return this.request(endpoint, {\n      method: \"DELETE\"\n    });\n  }\n}\n\n// Authentication API\nexport const authAPI = {\n  async login(credentials) {\n    const response = await ApiClient.post(\"/auth/login\", credentials);\n    if (response.token) {\n      TokenManager.setToken(response.token);\n    }\n    return response;\n  },\n  async register(userData) {\n    const response = await ApiClient.post(\"/auth/register\", userData);\n    if (response.token) {\n      TokenManager.setToken(response.token);\n    }\n    return response;\n  },\n  logout() {\n    TokenManager.removeToken();\n    window.location.href = \"/login\";\n  },\n  getCurrentUser() {\n    const token = TokenManager.getToken();\n    return TokenManager.getUserFromToken(token);\n  },\n  isAuthenticated() {\n    const token = TokenManager.getToken();\n    return token && !TokenManager.isTokenExpired(token);\n  },\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return user && user.role === \"ADMIN\";\n  }\n};\n\n// User API\nexport const userAPI = {\n  async getAllUsers() {\n    return ApiClient.get(\"/users\");\n  },\n  async getUserById(id) {\n    return ApiClient.get(`/users/${id}`);\n  },\n  async createUser(userData) {\n    return ApiClient.post(\"/users\", userData);\n  },\n  async updateUser(id, userData) {\n    return ApiClient.put(`/users/${id}`, userData);\n  },\n  async deleteUser(id) {\n    return ApiClient.delete(`/users/${id}`);\n  },\n  async getUserProfile() {\n    const user = authAPI.getCurrentUser();\n    if (user && user.id) {\n      return this.getUserById(user.id);\n    }\n    throw new Error(\"No authenticated user\");\n  }\n};\n\n// Folder API\nexport const folderAPI = {\n  async getAllFolders() {\n    return ApiClient.get(\"/folders\");\n  },\n  async getFolderById(id) {\n    return ApiClient.get(`/folders/${id}`);\n  },\n  async createFolder(folderData) {\n    return ApiClient.post(\"/folders\", folderData);\n  },\n  async updateFolder(id, folderData) {\n    return ApiClient.put(`/folders/${id}`, folderData);\n  },\n  async deleteFolder(id) {\n    return ApiClient.delete(`/folders/${id}`);\n  },\n  async getSubFolders(id) {\n    return ApiClient.get(`/folders/${id}/subfolders`);\n  },\n  async getUserFolders() {\n    const user = authAPI.getCurrentUser();\n    if (user && user.id) {\n      const folders = await this.getAllFolders();\n      return folders.filter(folder => folder.owner.id === user.id);\n    }\n    return [];\n  },\n  async getSharedFolders() {\n    const user = authAPI.getCurrentUser();\n    if (user && user.id) {\n      const folders = await this.getAllFolders();\n      return folders.filter(folder => folder.owner.id !== user.id && folder.isShared);\n    }\n    return [];\n  }\n};\n\n// Document API\nexport const documentAPI = {\n  async getAllDocuments() {\n    return ApiClient.get(\"/documents\");\n  },\n  async getDocumentById(id) {\n    return ApiClient.get(`/documents/${id}`);\n  },\n  async createDocument(documentData) {\n    return ApiClient.post(\"/documents\", documentData);\n  },\n  async updateDocument(id, documentData) {\n    return ApiClient.put(`/documents/${id}`, documentData);\n  },\n  async deleteDocument(id) {\n    return ApiClient.delete(`/documents/${id}`);\n  },\n  async uploadFile(file, folderId = null) {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    if (folderId) {\n      formData.append(\"folderId\", folderId);\n    }\n    const token = TokenManager.getToken();\n    const response = await fetch(`${API_BASE_URL}/documents/upload`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message || \"Upload failed\");\n    }\n    return response.json();\n  },\n  async getUserDocuments() {\n    const user = authAPI.getCurrentUser();\n    if (user && user.id) {\n      const documents = await this.getAllDocuments();\n      return documents.filter(doc => doc.owner.id === user.id);\n    }\n    return [];\n  },\n  async getDocumentsByFolder(folderId) {\n    const documents = await this.getAllDocuments();\n    return documents.filter(doc => doc.folderId === folderId);\n  }\n};\n\n// File operations helper\nexport const fileOperations = {\n  async createNewFolder(name, parentId = null) {\n    const user = authAPI.getCurrentUser();\n    if (!user) throw new Error(\"User not authenticated\");\n    const folderData = {\n      name,\n      parentId,\n      owner: {\n        id: user.id\n      },\n      isShared: false,\n      createdAt: new Date().toISOString()\n    };\n    return folderAPI.createFolder(folderData);\n  },\n  async uploadFileToFolder(file, folderId = null) {\n    if (!authAPI.isAuthenticated()) {\n      throw new Error(\"User not authenticated\");\n    }\n    return documentAPI.uploadFile(file, folderId);\n  },\n  async canUserModifyItem(itemOwnerId) {\n    const user = authAPI.getCurrentUser();\n    if (!user) return false;\n\n    // Admin can modify any item, user can only modify their own\n    return authAPI.isAdmin() || user.id === itemOwnerId;\n  },\n  async searchDocuments(query) {\n    const documents = await documentAPI.getAllDocuments();\n    return documents.filter(doc => {\n      var _doc$description;\n      return doc.name.toLowerCase().includes(query.toLowerCase()) || ((_doc$description = doc.description) === null || _doc$description === void 0 ? void 0 : _doc$description.toLowerCase().includes(query.toLowerCase()));\n    });\n  }\n};\nexport default {\n  authAPI,\n  userAPI,\n  folderAPI,\n  documentAPI,\n  fileOperations,\n  TokenManager\n};","map":{"version":3,"names":["API_BASE_URL","process","env","NEXT_PUBLIC_API_URL","TokenManager","getToken","window","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","isTokenExpired","payload","JSON","parse","atob","split","exp","Date","now","getUserFromToken","ApiClient","request","endpoint","options","url","config","headers","Authorization","response","fetch","status","location","href","data","json","ok","Error","message","error","console","get","method","post","body","stringify","put","delete","authAPI","login","credentials","register","userData","logout","getCurrentUser","isAuthenticated","isAdmin","user","role","userAPI","getAllUsers","getUserById","id","createUser","updateUser","deleteUser","getUserProfile","folderAPI","getAllFolders","getFolderById","createFolder","folderData","updateFolder","deleteFolder","getSubFolders","getUserFolders","folders","filter","folder","owner","getSharedFolders","isShared","documentAPI","getAllDocuments","getDocumentById","createDocument","documentData","updateDocument","deleteDocument","uploadFile","file","folderId","formData","FormData","append","getUserDocuments","documents","doc","getDocumentsByFolder","fileOperations","createNewFolder","name","parentId","createdAt","toISOString","uploadFileToFolder","canUserModifyItem","itemOwnerId","searchDocuments","query","_doc$description","toLowerCase","includes","description"],"sources":["E:/DOCUMENT SHARING/827a159d-8cb5-4b0c-a3ae-c6126cce5724-e95b3f4a-3bfb-45da-a11b-d02a0840f98d/reactapp/src/utils/api.js"],"sourcesContent":["// API client for document sharing platform\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\r\n\r\n// JWT Token management\r\nclass TokenManager {\r\n  static getToken() {\r\n    if (typeof window !== \"undefined\") {\r\n      return localStorage.getItem(\"jwt_token\")\r\n    }\r\n    return null\r\n  }\r\n\r\n  static setToken(token) {\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.setItem(\"jwt_token\", token)\r\n    }\r\n  }\r\n\r\n  static removeToken() {\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.removeItem(\"jwt_token\")\r\n    }\r\n  }\r\n\r\n  static isTokenExpired(token) {\r\n    if (!token) return true\r\n    try {\r\n      const payload = JSON.parse(atob(token.split(\".\")[1]))\r\n      return payload.exp * 1000 < Date.now()\r\n    } catch {\r\n      return true\r\n    }\r\n  }\r\n\r\n  static getUserFromToken(token) {\r\n    if (!token) return null\r\n    try {\r\n      const payload = JSON.parse(atob(token.split(\".\")[1]))\r\n      return payload\r\n    } catch {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\n// HTTP client with authentication\r\nclass ApiClient {\r\n  static async request(endpoint, options = {}) {\r\n    const token = TokenManager.getToken()\r\n    const url = `${API_BASE_URL}${endpoint}`\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    }\r\n\r\n    if (token && !TokenManager.isTokenExpired(token)) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, config)\r\n\r\n      if (response.status === 401) {\r\n        TokenManager.removeToken()\r\n        window.location.href = \"/login\"\r\n        return\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || \"Request failed\")\r\n      }\r\n\r\n      return data\r\n    } catch (error) {\r\n      console.error(\"API request failed:\", error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  static get(endpoint) {\r\n    return this.request(endpoint, { method: \"GET\" })\r\n  }\r\n\r\n  static post(endpoint, data) {\r\n    return this.request(endpoint, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    })\r\n  }\r\n\r\n  static put(endpoint, data) {\r\n    return this.request(endpoint, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data),\r\n    })\r\n  }\r\n\r\n  static delete(endpoint) {\r\n    return this.request(endpoint, { method: \"DELETE\" })\r\n  }\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  async login(credentials) {\r\n    const response = await ApiClient.post(\"/auth/login\", credentials)\r\n    if (response.token) {\r\n      TokenManager.setToken(response.token)\r\n    }\r\n    return response\r\n  },\r\n\r\n  async register(userData) {\r\n    const response = await ApiClient.post(\"/auth/register\", userData)\r\n    if (response.token) {\r\n      TokenManager.setToken(response.token)\r\n    }\r\n    return response\r\n  },\r\n\r\n  logout() {\r\n    TokenManager.removeToken()\r\n    window.location.href = \"/login\"\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const token = TokenManager.getToken()\r\n    return TokenManager.getUserFromToken(token)\r\n  },\r\n\r\n  isAuthenticated() {\r\n    const token = TokenManager.getToken()\r\n    return token && !TokenManager.isTokenExpired(token)\r\n  },\r\n\r\n  isAdmin() {\r\n    const user = this.getCurrentUser()\r\n    return user && user.role === \"ADMIN\"\r\n  },\r\n}\r\n\r\n// User API\r\nexport const userAPI = {\r\n  async getAllUsers() {\r\n    return ApiClient.get(\"/users\")\r\n  },\r\n\r\n  async getUserById(id) {\r\n    return ApiClient.get(`/users/${id}`)\r\n  },\r\n\r\n  async createUser(userData) {\r\n    return ApiClient.post(\"/users\", userData)\r\n  },\r\n\r\n  async updateUser(id, userData) {\r\n    return ApiClient.put(`/users/${id}`, userData)\r\n  },\r\n\r\n  async deleteUser(id) {\r\n    return ApiClient.delete(`/users/${id}`)\r\n  },\r\n\r\n  async getUserProfile() {\r\n    const user = authAPI.getCurrentUser()\r\n    if (user && user.id) {\r\n      return this.getUserById(user.id)\r\n    }\r\n    throw new Error(\"No authenticated user\")\r\n  },\r\n}\r\n\r\n// Folder API\r\nexport const folderAPI = {\r\n  async getAllFolders() {\r\n    return ApiClient.get(\"/folders\")\r\n  },\r\n\r\n  async getFolderById(id) {\r\n    return ApiClient.get(`/folders/${id}`)\r\n  },\r\n\r\n  async createFolder(folderData) {\r\n    return ApiClient.post(\"/folders\", folderData)\r\n  },\r\n\r\n  async updateFolder(id, folderData) {\r\n    return ApiClient.put(`/folders/${id}`, folderData)\r\n  },\r\n\r\n  async deleteFolder(id) {\r\n    return ApiClient.delete(`/folders/${id}`)\r\n  },\r\n\r\n  async getSubFolders(id) {\r\n    return ApiClient.get(`/folders/${id}/subfolders`)\r\n  },\r\n\r\n  async getUserFolders() {\r\n    const user = authAPI.getCurrentUser()\r\n    if (user && user.id) {\r\n      const folders = await this.getAllFolders()\r\n      return folders.filter((folder) => folder.owner.id === user.id)\r\n    }\r\n    return []\r\n  },\r\n\r\n  async getSharedFolders() {\r\n    const user = authAPI.getCurrentUser()\r\n    if (user && user.id) {\r\n      const folders = await this.getAllFolders()\r\n      return folders.filter((folder) => folder.owner.id !== user.id && folder.isShared)\r\n    }\r\n    return []\r\n  },\r\n}\r\n\r\n// Document API\r\nexport const documentAPI = {\r\n  async getAllDocuments() {\r\n    return ApiClient.get(\"/documents\")\r\n  },\r\n\r\n  async getDocumentById(id) {\r\n    return ApiClient.get(`/documents/${id}`)\r\n  },\r\n\r\n  async createDocument(documentData) {\r\n    return ApiClient.post(\"/documents\", documentData)\r\n  },\r\n\r\n  async updateDocument(id, documentData) {\r\n    return ApiClient.put(`/documents/${id}`, documentData)\r\n  },\r\n\r\n  async deleteDocument(id) {\r\n    return ApiClient.delete(`/documents/${id}`)\r\n  },\r\n\r\n  async uploadFile(file, folderId = null) {\r\n    const formData = new FormData()\r\n    formData.append(\"file\", file)\r\n    if (folderId) {\r\n      formData.append(\"folderId\", folderId)\r\n    }\r\n\r\n    const token = TokenManager.getToken()\r\n    const response = await fetch(`${API_BASE_URL}/documents/upload`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: formData,\r\n    })\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json()\r\n      throw new Error(error.message || \"Upload failed\")\r\n    }\r\n\r\n    return response.json()\r\n  },\r\n\r\n  async getUserDocuments() {\r\n    const user = authAPI.getCurrentUser()\r\n    if (user && user.id) {\r\n      const documents = await this.getAllDocuments()\r\n      return documents.filter((doc) => doc.owner.id === user.id)\r\n    }\r\n    return []\r\n  },\r\n\r\n  async getDocumentsByFolder(folderId) {\r\n    const documents = await this.getAllDocuments()\r\n    return documents.filter((doc) => doc.folderId === folderId)\r\n  },\r\n}\r\n\r\n// File operations helper\r\nexport const fileOperations = {\r\n  async createNewFolder(name, parentId = null) {\r\n    const user = authAPI.getCurrentUser()\r\n    if (!user) throw new Error(\"User not authenticated\")\r\n\r\n    const folderData = {\r\n      name,\r\n      parentId,\r\n      owner: { id: user.id },\r\n      isShared: false,\r\n      createdAt: new Date().toISOString(),\r\n    }\r\n\r\n    return folderAPI.createFolder(folderData)\r\n  },\r\n\r\n  async uploadFileToFolder(file, folderId = null) {\r\n    if (!authAPI.isAuthenticated()) {\r\n      throw new Error(\"User not authenticated\")\r\n    }\r\n\r\n    return documentAPI.uploadFile(file, folderId)\r\n  },\r\n\r\n  async canUserModifyItem(itemOwnerId) {\r\n    const user = authAPI.getCurrentUser()\r\n    if (!user) return false\r\n\r\n    // Admin can modify any item, user can only modify their own\r\n    return authAPI.isAdmin() || user.id === itemOwnerId\r\n  },\r\n\r\n  async searchDocuments(query) {\r\n    const documents = await documentAPI.getAllDocuments()\r\n    return documents.filter(\r\n      (doc) =>\r\n        doc.name.toLowerCase().includes(query.toLowerCase()) ||\r\n        doc.description?.toLowerCase().includes(query.toLowerCase()),\r\n    )\r\n  },\r\n}\r\n\r\nexport default {\r\n  authAPI,\r\n  userAPI,\r\n  folderAPI,\r\n  documentAPI,\r\n  fileOperations,\r\n  TokenManager,\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}