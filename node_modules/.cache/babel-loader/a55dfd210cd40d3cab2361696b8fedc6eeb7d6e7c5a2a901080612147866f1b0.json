{"ast":null,"code":"// src/services/documentService.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst getAuthHeaders = () => ({\n  'Authorization': `Bearer ${localStorage.getItem('token')}`\n});\nconst documentService = {\n  searchDocuments: async query => {\n    const response = await fetch(`${API_BASE_URL}/documents/search?q=${encodeURIComponent(query)}`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Search failed');\n    }\n    return response.json();\n  },\n  getMyDocuments: async () => {\n    const response = await fetch(`${API_BASE_URL}/documents/my`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch documents');\n    }\n    return response.json();\n  },\n  getSharedDocuments: async () => {\n    const response = await fetch(`${API_BASE_URL}/documents/shared`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch shared documents');\n    }\n    return response.json();\n  },\n  uploadDocument: async formData => {\n    const response = await fetch(`${API_BASE_URL}/documents/upload`, {\n      method: 'POST',\n      headers: {\n        ...getAuthHeaders()\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Upload failed');\n    }\n    return response.json();\n  },\n  createFolder: async folderData => {\n    const response = await fetch(`${API_BASE_URL}/folders`, {\n      method: 'POST',\n      headers: {\n        ...getAuthHeaders(),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(folderData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create folder');\n    }\n    return response.json();\n  },\n  getFolders: async () => {\n    const response = await fetch(`${API_BASE_URL}/folders`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch folders');\n    }\n    return response.json();\n  }\n};\nexport default documentService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getAuthHeaders","localStorage","getItem","documentService","searchDocuments","query","response","fetch","encodeURIComponent","headers","ok","Error","json","getMyDocuments","getSharedDocuments","uploadDocument","formData","method","body","createFolder","folderData","JSON","stringify","getFolders"],"sources":["E:/DOCUMENT SHARING/827a159d-8cb5-4b0c-a3ae-c6126cce5724-e95b3f4a-3bfb-45da-a11b-d02a0840f98d/reactapp/src/services/documentService.js"],"sourcesContent":["// src/services/documentService.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nconst getAuthHeaders = () => ({\r\n  'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n});\r\n\r\nconst documentService = {\r\n  searchDocuments: async (query) => {\r\n    const response = await fetch(`${API_BASE_URL}/documents/search?q=${encodeURIComponent(query)}`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Search failed');\r\n    }\r\n\r\n    return response.json();\r\n  },\r\n\r\n  getMyDocuments: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/documents/my`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch documents');\r\n    }\r\n\r\n    return response.json();\r\n  },\r\n\r\n  getSharedDocuments: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/documents/shared`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch shared documents');\r\n    }\r\n\r\n    return response.json();\r\n  },\r\n\r\n  uploadDocument: async (formData) => {\r\n    const response = await fetch(`${API_BASE_URL}/documents/upload`, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...getAuthHeaders(),\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Upload failed');\r\n    }\r\n\r\n    return response.json();\r\n  },\r\n\r\n  createFolder: async (folderData) => {\r\n    const response = await fetch(`${API_BASE_URL}/folders`, {\r\n      method: 'POST',\r\n      headers: {\r\n        ...getAuthHeaders(),\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(folderData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create folder');\r\n    }\r\n\r\n    return response.json();\r\n  },\r\n\r\n  getFolders: async () => {\r\n    const response = await fetch(`${API_BASE_URL}/folders`, {\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch folders');\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n};\r\n\r\nexport default documentService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}