{"ast":null,"code":"// API Service for Document Sharing System\n// Base URL for the Spring Boot backend\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\n\n// Helper function for file upload headers\nconst getFileUploadHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Authorization': `Bearer ${token}`\n    // Note: Don't set Content-Type for FormData, let browser handle it\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage;\n    try {\n      const errorJson = JSON.parse(errorText);\n      errorMessage = errorJson.message || errorJson.error || 'An error occurred';\n    } catch {\n      errorMessage = errorText || `HTTP ${response.status}: ${response.statusText}`;\n    }\n    throw new Error(errorMessage);\n  }\n  const contentType = response.headers.get('Content-Type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  }\n  return response;\n};\n\n// ==================== FOLDER API ====================\n\nexport const folderAPI = {\n  // Create a new folder\n  create: async folderData => {\n    const response = await fetch(`${BASE_URL}/folders`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        name: folderData.name,\n        description: folderData.description || null,\n        parentFolderId: folderData.parentFolderId || null\n      })\n    });\n    return handleResponse(response);\n  },\n  // Get folder by ID\n  getById: async folderId => {\n    const response = await fetch(`${BASE_URL}/folders/${folderId}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get all folders for current user\n  getAll: async () => {\n    const response = await fetch(`${BASE_URL}/folders`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get folders by parent ID (for nested folder structure)\n  getByParent: async (parentFolderId = null) => {\n    const url = parentFolderId ? `${BASE_URL}/folders?parentId=${parentFolderId}` : `${BASE_URL}/folders?parentId=root`;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Update folder\n  update: async (folderId, folderData) => {\n    const response = await fetch(`${BASE_URL}/folders/${folderId}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        name: folderData.name,\n        description: folderData.description\n      })\n    });\n    return handleResponse(response);\n  },\n  // Delete folder\n  delete: async folderId => {\n    const response = await fetch(`${BASE_URL}/folders/${folderId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// ==================== DOCUMENT API ====================\n\nexport const documentAPI = {\n  // Upload a new document\n  upload: async (file, metadata = {}) => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add metadata\n    if (metadata.name) formData.append('name', metadata.name);\n    if (metadata.description) formData.append('description', metadata.description);\n    if (metadata.isPublic !== undefined) formData.append('isPublic', metadata.isPublic);\n    if (metadata.parentFolderId) formData.append('parentFolderId', metadata.parentFolderId);\n    const response = await fetch(`${BASE_URL}/documents/upload`, {\n      method: 'POST',\n      headers: getFileUploadHeaders(),\n      body: formData\n    });\n    return handleResponse(response);\n  },\n  // Create document metadata without file upload\n  create: async documentData => {\n    const response = await fetch(`${BASE_URL}/documents`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        name: documentData.name,\n        description: documentData.description || null,\n        fileType: documentData.fileType,\n        isPublic: documentData.isPublic || false,\n        parentFolderId: documentData.parentFolderId || null\n      })\n    });\n    return handleResponse(response);\n  },\n  // Get document by ID\n  getById: async documentId => {\n    const response = await fetch(`${BASE_URL}/documents/${documentId}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get all documents for current user\n  getMy: async () => {\n    const response = await fetch(`${BASE_URL}/documents/my`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get documents by folder\n  getByFolder: async (folderId = null) => {\n    const url = folderId ? `${BASE_URL}/documents?folderId=${folderId}` : `${BASE_URL}/documents?folderId=root`;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get shared documents\n  getShared: async () => {\n    const response = await fetch(`${BASE_URL}/documents/shared`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Update document metadata\n  update: async (documentId, documentData) => {\n    const response = await fetch(`${BASE_URL}/documents/${documentId}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        name: documentData.name,\n        description: documentData.description,\n        isPublic: documentData.isPublic\n      })\n    });\n    return handleResponse(response);\n  },\n  // Delete document\n  delete: async documentId => {\n    const response = await fetch(`${BASE_URL}/documents/${documentId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Download document\n  download: async documentId => {\n    const response = await fetch(`${BASE_URL}/documents/download/${documentId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to download document');\n    }\n    return response; // Return response for blob handling\n  },\n  // Search documents\n  search: async (query, filters = {}) => {\n    const params = new URLSearchParams();\n    if (query) params.append('q', query);\n    if (filters.fileType) params.append('fileType', filters.fileType);\n    if (filters.owner) params.append('owner', filters.owner);\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    const response = await fetch(`${BASE_URL}/documents/search?${params.toString()}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// ==================== PERMISSION API ====================\n\nexport const permissionAPI = {\n  // Create/Grant permission\n  create: async permissionData => {\n    const response = await fetch(`${BASE_URL}/permissions`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        documentId: permissionData.documentId,\n        userId: permissionData.userId,\n        userEmail: permissionData.userEmail,\n        accessLevel: permissionData.accessLevel // 'READ_ONLY' or 'FULL_ACCESS'\n      })\n    });\n    return handleResponse(response);\n  },\n  // Get permissions for a document\n  getByDocument: async documentId => {\n    const response = await fetch(`${BASE_URL}/permissions?documentId=${documentId}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get all permissions\n  getAll: async () => {\n    const response = await fetch(`${BASE_URL}/permissions`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Update permission\n  update: async (permissionId, permissionData) => {\n    const response = await fetch(`${BASE_URL}/permissions/${permissionId}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        accessLevel: permissionData.accessLevel\n      })\n    });\n    return handleResponse(response);\n  },\n  // Delete/Revoke permission\n  delete: async permissionId => {\n    const response = await fetch(`${BASE_URL}/permissions/${permissionId}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// ==================== USER API ====================\n\nexport const userAPI = {\n  // Get current user profile\n  getProfile: async () => {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Update current user profile\n  updateProfile: async userData => {\n    const response = await fetch(`${BASE_URL}/users/me`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        name: userData.name\n      })\n    });\n    return handleResponse(response);\n  },\n  // Change password\n  changePassword: async passwordData => {\n    const response = await fetch(`${BASE_URL}/users/me/password`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        currentPassword: passwordData.currentPassword,\n        newPassword: passwordData.newPassword\n      })\n    });\n    return handleResponse(response);\n  },\n  // Get all users (for sharing - search users by email)\n  search: async query => {\n    const response = await fetch(`${BASE_URL}/users/search?q=${encodeURIComponent(query)}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get user by ID\n  getById: async userId => {\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  }\n};\n\n// ==================== ACTIVITY LOG API ====================\n\nexport const activityAPI = {\n  // Get activity logs for current user\n  getMy: async () => {\n    const response = await fetch(`${BASE_URL}/activity-logs/my`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get activity logs for a specific document\n  getByDocument: async documentId => {\n    const response = await fetch(`${BASE_URL}/activity-logs?documentId=${documentId}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Get all activity logs (Admin only)\n  getAll: async () => {\n    const response = await fetch(`${BASE_URL}/activity-logs`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  },\n  // Create activity log (usually done automatically by backend)\n  create: async activityData => {\n    const response = await fetch(`${BASE_URL}/activity-logs`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        action: activityData.action,\n        documentId: activityData.documentId\n      })\n    });\n    return handleResponse(response);\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\n\nexport const utils = {\n  // Format file size\n  formatFileSize: bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n  // Format date\n  formatDate: dateString => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  },\n  // Get file type icon color\n  getFileTypeColor: fileType => {\n    const colors = {\n      'pdf': '#DC2626',\n      'doc': '#2563EB',\n      'docx': '#2563EB',\n      'xls': '#16A34A',\n      'xlsx': '#16A34A',\n      'ppt': '#EA580C',\n      'pptx': '#EA580C',\n      'jpg': '#7C3AED',\n      'jpeg': '#7C3AED',\n      'png': '#7C3AED',\n      'gif': '#7C3AED',\n      'txt': '#6B7280',\n      'zip': '#F59E0B',\n      'rar': '#F59E0B',\n      'default': '#6B7280'\n    };\n    return colors[fileType === null || fileType === void 0 ? void 0 : fileType.toLowerCase()] || colors.default;\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  // Get user role from token (basic JWT decode)\n  getUserRole: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    try {\n      var _payload$authorities;\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.role || ((_payload$authorities = payload.authorities) === null || _payload$authorities === void 0 ? void 0 : _payload$authorities[0]) || null;\n    } catch {\n      return null;\n    }\n  },\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n};\n\n// Default export\nexport default {\n  folderAPI,\n  documentAPI,\n  permissionAPI,\n  userAPI,\n  activityAPI,\n  utils\n};","map":{"version":3,"names":["BASE_URL","process","env","REACT_APP_API_URL","getAuthHeaders","token","localStorage","getItem","getFileUploadHeaders","handleResponse","response","ok","errorText","text","errorMessage","errorJson","JSON","parse","message","error","status","statusText","Error","contentType","headers","get","includes","json","folderAPI","create","folderData","fetch","method","body","stringify","name","description","parentFolderId","getById","folderId","getAll","getByParent","url","update","delete","documentAPI","upload","file","metadata","formData","FormData","append","isPublic","undefined","documentData","fileType","documentId","getMy","getByFolder","getShared","download","search","query","filters","params","URLSearchParams","owner","dateFrom","dateTo","toString","permissionAPI","permissionData","userId","userEmail","accessLevel","getByDocument","permissionId","userAPI","getProfile","updateProfile","userData","changePassword","passwordData","currentPassword","newPassword","encodeURIComponent","activityAPI","activityData","action","utils","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","getFileTypeColor","colors","toLowerCase","default","isAuthenticated","getUserRole","_payload$authorities","payload","atob","split","role","authorities","logout","removeItem","window","location","href"],"sources":["E:/DOCUMENT SHARING/827a159d-8cb5-4b0c-a3ae-c6126cce5724-e95b3f4a-3bfb-45da-a11b-d02a0840f98d/reactapp/src/services/api.js"],"sourcesContent":["// API Service for Document Sharing System\r\n// Base URL for the Spring Boot backend\r\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\n// Helper function to get auth headers\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Authorization': `Bearer ${token}`,\r\n    'Content-Type': 'application/json'\r\n  };\r\n};\r\n\r\n// Helper function for file upload headers\r\nconst getFileUploadHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Authorization': `Bearer ${token}`\r\n    // Note: Don't set Content-Type for FormData, let browser handle it\r\n  };\r\n};\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    let errorMessage;\r\n    \r\n    try {\r\n      const errorJson = JSON.parse(errorText);\r\n      errorMessage = errorJson.message || errorJson.error || 'An error occurred';\r\n    } catch {\r\n      errorMessage = errorText || `HTTP ${response.status}: ${response.statusText}`;\r\n    }\r\n    \r\n    throw new Error(errorMessage);\r\n  }\r\n  \r\n  const contentType = response.headers.get('Content-Type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    return response.json();\r\n  }\r\n  return response;\r\n};\r\n\r\n// ==================== FOLDER API ====================\r\n\r\nexport const folderAPI = {\r\n  // Create a new folder\r\n  create: async (folderData) => {\r\n    const response = await fetch(`${BASE_URL}/folders`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        name: folderData.name,\r\n        description: folderData.description || null,\r\n        parentFolderId: folderData.parentFolderId || null\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get folder by ID\r\n  getById: async (folderId) => {\r\n    const response = await fetch(`${BASE_URL}/folders/${folderId}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get all folders for current user\r\n  getAll: async () => {\r\n    const response = await fetch(`${BASE_URL}/folders`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get folders by parent ID (for nested folder structure)\r\n  getByParent: async (parentFolderId = null) => {\r\n    const url = parentFolderId \r\n      ? `${BASE_URL}/folders?parentId=${parentFolderId}`\r\n      : `${BASE_URL}/folders?parentId=root`;\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Update folder\r\n  update: async (folderId, folderData) => {\r\n    const response = await fetch(`${BASE_URL}/folders/${folderId}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        name: folderData.name,\r\n        description: folderData.description\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Delete folder\r\n  delete: async (folderId) => {\r\n    const response = await fetch(`${BASE_URL}/folders/${folderId}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// ==================== DOCUMENT API ====================\r\n\r\nexport const documentAPI = {\r\n  // Upload a new document\r\n  upload: async (file, metadata = {}) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    \r\n    // Add metadata\r\n    if (metadata.name) formData.append('name', metadata.name);\r\n    if (metadata.description) formData.append('description', metadata.description);\r\n    if (metadata.isPublic !== undefined) formData.append('isPublic', metadata.isPublic);\r\n    if (metadata.parentFolderId) formData.append('parentFolderId', metadata.parentFolderId);\r\n\r\n    const response = await fetch(`${BASE_URL}/documents/upload`, {\r\n      method: 'POST',\r\n      headers: getFileUploadHeaders(),\r\n      body: formData\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Create document metadata without file upload\r\n  create: async (documentData) => {\r\n    const response = await fetch(`${BASE_URL}/documents`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        name: documentData.name,\r\n        description: documentData.description || null,\r\n        fileType: documentData.fileType,\r\n        isPublic: documentData.isPublic || false,\r\n        parentFolderId: documentData.parentFolderId || null\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get document by ID\r\n  getById: async (documentId) => {\r\n    const response = await fetch(`${BASE_URL}/documents/${documentId}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get all documents for current user\r\n  getMy: async () => {\r\n    const response = await fetch(`${BASE_URL}/documents/my`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get documents by folder\r\n  getByFolder: async (folderId = null) => {\r\n    const url = folderId \r\n      ? `${BASE_URL}/documents?folderId=${folderId}`\r\n      : `${BASE_URL}/documents?folderId=root`;\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get shared documents\r\n  getShared: async () => {\r\n    const response = await fetch(`${BASE_URL}/documents/shared`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Update document metadata\r\n  update: async (documentId, documentData) => {\r\n    const response = await fetch(`${BASE_URL}/documents/${documentId}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        name: documentData.name,\r\n        description: documentData.description,\r\n        isPublic: documentData.isPublic\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Delete document\r\n  delete: async (documentId) => {\r\n    const response = await fetch(`${BASE_URL}/documents/${documentId}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Download document\r\n  download: async (documentId) => {\r\n    const response = await fetch(`${BASE_URL}/documents/download/${documentId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to download document');\r\n    }\r\n    \r\n    return response; // Return response for blob handling\r\n  },\r\n\r\n  // Search documents\r\n  search: async (query, filters = {}) => {\r\n    const params = new URLSearchParams();\r\n    if (query) params.append('q', query);\r\n    if (filters.fileType) params.append('fileType', filters.fileType);\r\n    if (filters.owner) params.append('owner', filters.owner);\r\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\r\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\r\n\r\n    const response = await fetch(`${BASE_URL}/documents/search?${params.toString()}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// ==================== PERMISSION API ====================\r\n\r\nexport const permissionAPI = {\r\n  // Create/Grant permission\r\n  create: async (permissionData) => {\r\n    const response = await fetch(`${BASE_URL}/permissions`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        documentId: permissionData.documentId,\r\n        userId: permissionData.userId,\r\n        userEmail: permissionData.userEmail,\r\n        accessLevel: permissionData.accessLevel // 'READ_ONLY' or 'FULL_ACCESS'\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get permissions for a document\r\n  getByDocument: async (documentId) => {\r\n    const response = await fetch(`${BASE_URL}/permissions?documentId=${documentId}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get all permissions\r\n  getAll: async () => {\r\n    const response = await fetch(`${BASE_URL}/permissions`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Update permission\r\n  update: async (permissionId, permissionData) => {\r\n    const response = await fetch(`${BASE_URL}/permissions/${permissionId}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        accessLevel: permissionData.accessLevel\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Delete/Revoke permission\r\n  delete: async (permissionId) => {\r\n    const response = await fetch(`${BASE_URL}/permissions/${permissionId}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// ==================== USER API ====================\r\n\r\nexport const userAPI = {\r\n  // Get current user profile\r\n  getProfile: async () => {\r\n    const response = await fetch(`${BASE_URL}/users/me`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Update current user profile\r\n  updateProfile: async (userData) => {\r\n    const response = await fetch(`${BASE_URL}/users/me`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        name: userData.name\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (passwordData) => {\r\n    const response = await fetch(`${BASE_URL}/users/me/password`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        currentPassword: passwordData.currentPassword,\r\n        newPassword: passwordData.newPassword\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get all users (for sharing - search users by email)\r\n  search: async (query) => {\r\n    const response = await fetch(`${BASE_URL}/users/search?q=${encodeURIComponent(query)}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get user by ID\r\n  getById: async (userId) => {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// ==================== ACTIVITY LOG API ====================\r\n\r\nexport const activityAPI = {\r\n  // Get activity logs for current user\r\n  getMy: async () => {\r\n    const response = await fetch(`${BASE_URL}/activity-logs/my`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get activity logs for a specific document\r\n  getByDocument: async (documentId) => {\r\n    const response = await fetch(`${BASE_URL}/activity-logs?documentId=${documentId}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Get all activity logs (Admin only)\r\n  getAll: async () => {\r\n    const response = await fetch(`${BASE_URL}/activity-logs`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  // Create activity log (usually done automatically by backend)\r\n  create: async (activityData) => {\r\n    const response = await fetch(`${BASE_URL}/activity-logs`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify({\r\n        action: activityData.action,\r\n        documentId: activityData.documentId\r\n      })\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\n// ==================== UTILITY FUNCTIONS ====================\r\n\r\nexport const utils = {\r\n  // Format file size\r\n  formatFileSize: (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  },\r\n\r\n  // Format date\r\n  formatDate: (dateString) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  },\r\n\r\n  // Get file type icon color\r\n  getFileTypeColor: (fileType) => {\r\n    const colors = {\r\n      'pdf': '#DC2626',\r\n      'doc': '#2563EB',\r\n      'docx': '#2563EB',\r\n      'xls': '#16A34A',\r\n      'xlsx': '#16A34A',\r\n      'ppt': '#EA580C',\r\n      'pptx': '#EA580C',\r\n      'jpg': '#7C3AED',\r\n      'jpeg': '#7C3AED',\r\n      'png': '#7C3AED',\r\n      'gif': '#7C3AED',\r\n      'txt': '#6B7280',\r\n      'zip': '#F59E0B',\r\n      'rar': '#F59E0B',\r\n      'default': '#6B7280'\r\n    };\r\n    return colors[fileType?.toLowerCase()] || colors.default;\r\n  },\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('token');\r\n  },\r\n\r\n  // Get user role from token (basic JWT decode)\r\n  getUserRole: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return null;\r\n    \r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.role || payload.authorities?.[0] || null;\r\n    } catch {\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    window.location.href = '/login';\r\n  }\r\n};\r\n\r\n// Default export\r\nexport default {\r\n  folderAPI,\r\n  documentAPI,\r\n  permissionAPI,\r\n  userAPI,\r\n  activityAPI,\r\n  utils\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}