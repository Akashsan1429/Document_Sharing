{"ast":null,"code":"// Folder serviceimport api from './api';\n\nclass FolderService {\n  async getAllFolders() {\n    return api.get('/folders');\n  }\n  async getFolder(id) {\n    return api.get(`/folders/${id}`);\n  }\n  async createFolder(folderData) {\n    return api.post('/folders', folderData);\n  }\n  async updateFolder(id, folderData) {\n    return api.put(`/folders/${id}`, folderData);\n  }\n  async deleteFolder(id) {\n    return api.delete(`/folders/${id}`);\n  }\n  async getRootFolders() {\n    return api.get('/folders', {\n      parentId: null\n    });\n  }\n  async getSubFolders(parentId) {\n    return api.get('/folders', {\n      parentId\n    });\n  }\n\n  // Build folder tree structure\n  buildFolderTree(folders) {\n    const folderMap = {};\n    const rootFolders = [];\n\n    // Create a map of folders\n    folders.forEach(folder => {\n      folderMap[folder.id] = {\n        ...folder,\n        children: []\n      };\n    });\n\n    // Build the tree structure\n    folders.forEach(folder => {\n      if (folder.parentFolderId && folderMap[folder.parentFolderId]) {\n        folderMap[folder.parentFolderId].children.push(folderMap[folder.id]);\n      } else {\n        rootFolders.push(folderMap[folder.id]);\n      }\n    });\n    return rootFolders;\n  }\n\n  // Get folder path (breadcrumb)\n  getFolderPath(folders, folderId) {\n    const path = [];\n    let currentFolder = folders.find(f => f.id === folderId);\n    while (currentFolder) {\n      path.unshift(currentFolder);\n      currentFolder = folders.find(f => f.id === currentFolder.parentFolderId);\n    }\n    return path;\n  }\n\n  // Validate folder operations\n  canMoveFolder(sourceId, targetId, folders) {\n    // Cannot move folder into itself or its children\n    const isDescendant = (folderId, potentialAncestorId) => {\n      const folder = folders.find(f => f.id === folderId);\n      if (!folder || !folder.parentFolderId) return false;\n      if (folder.parentFolderId === potentialAncestorId) return true;\n      return isDescendant(folder.parentFolderId, potentialAncestorId);\n    };\n    return sourceId !== targetId && !isDescendant(targetId, sourceId);\n  }\n\n  // Calculate folder size (including subfolders)\n  calculateFolderSize(folder, allFolders, allDocuments) {\n    let size = 0;\n\n    // Add size of documents in this folder\n    const folderDocuments = allDocuments.filter(doc => doc.parentFolderId === folder.id);\n    size += folderDocuments.reduce((sum, doc) => sum + (doc.size || 0), 0);\n\n    // Recursively add size of subfolders\n    const subFolders = allFolders.filter(f => f.parentFolderId === folder.id);\n    subFolders.forEach(subFolder => {\n      size += this.calculateFolderSize(subFolder, allFolders, allDocuments);\n    });\n    return size;\n  }\n\n  // Get folder statistics\n  getFolderStats(folder, allFolders, allDocuments) {\n    const getDescendantFolders = folderId => {\n      const children = allFolders.filter(f => f.parentFolderId === folderId);\n      let descendants = [...children];\n      children.forEach(child => {\n        descendants = [...descendants, ...getDescendantFolders(child.id)];\n      });\n      return descendants;\n    };\n    const descendantFolders = getDescendantFolders(folder.id);\n    const allFolderIds = [folder.id, ...descendantFolders.map(f => f.id)];\n    const totalDocuments = allDocuments.filter(doc => allFolderIds.includes(doc.parentFolderId));\n    return {\n      totalFolders: descendantFolders.length,\n      totalDocuments: totalDocuments.length,\n      totalSize: totalDocuments.reduce((sum, doc) => sum + (doc.size || 0), 0),\n      lastModified: Math.max(folder.updatedAt || 0, ...totalDocuments.map(doc => doc.updatedAt || 0))\n    };\n  }\n}\nexport default new FolderService();","map":{"version":3,"names":["FolderService","getAllFolders","api","get","getFolder","id","createFolder","folderData","post","updateFolder","put","deleteFolder","delete","getRootFolders","parentId","getSubFolders","buildFolderTree","folders","folderMap","rootFolders","forEach","folder","children","parentFolderId","push","getFolderPath","folderId","path","currentFolder","find","f","unshift","canMoveFolder","sourceId","targetId","isDescendant","potentialAncestorId","calculateFolderSize","allFolders","allDocuments","size","folderDocuments","filter","doc","reduce","sum","subFolders","subFolder","getFolderStats","getDescendantFolders","descendants","child","descendantFolders","allFolderIds","map","totalDocuments","includes","totalFolders","length","totalSize","lastModified","Math","max","updatedAt"],"sources":["E:/DOCUMENT SHARING/827a159d-8cb5-4b0c-a3ae-c6126cce5724-e95b3f4a-3bfb-45da-a11b-d02a0840f98d/reactapp/src/services/folderService.js"],"sourcesContent":["// Folder serviceimport api from './api';\r\n\r\nclass FolderService {\r\n  async getAllFolders() {\r\n    return api.get('/folders');\r\n  }\r\n\r\n  async getFolder(id) {\r\n    return api.get(`/folders/${id}`);\r\n  }\r\n\r\n  async createFolder(folderData) {\r\n    return api.post('/folders', folderData);\r\n  }\r\n\r\n  async updateFolder(id, folderData) {\r\n    return api.put(`/folders/${id}`, folderData);\r\n  }\r\n\r\n  async deleteFolder(id) {\r\n    return api.delete(`/folders/${id}`);\r\n  }\r\n\r\n  async getRootFolders() {\r\n    return api.get('/folders', { parentId: null });\r\n  }\r\n\r\n  async getSubFolders(parentId) {\r\n    return api.get('/folders', { parentId });\r\n  }\r\n\r\n  // Build folder tree structure\r\n  buildFolderTree(folders) {\r\n    const folderMap = {};\r\n    const rootFolders = [];\r\n\r\n    // Create a map of folders\r\n    folders.forEach(folder => {\r\n      folderMap[folder.id] = { ...folder, children: [] };\r\n    });\r\n\r\n    // Build the tree structure\r\n    folders.forEach(folder => {\r\n      if (folder.parentFolderId && folderMap[folder.parentFolderId]) {\r\n        folderMap[folder.parentFolderId].children.push(folderMap[folder.id]);\r\n      } else {\r\n        rootFolders.push(folderMap[folder.id]);\r\n      }\r\n    });\r\n\r\n    return rootFolders;\r\n  }\r\n\r\n  // Get folder path (breadcrumb)\r\n  getFolderPath(folders, folderId) {\r\n    const path = [];\r\n    let currentFolder = folders.find(f => f.id === folderId);\r\n\r\n    while (currentFolder) {\r\n      path.unshift(currentFolder);\r\n      currentFolder = folders.find(f => f.id === currentFolder.parentFolderId);\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  // Validate folder operations\r\n  canMoveFolder(sourceId, targetId, folders) {\r\n    // Cannot move folder into itself or its children\r\n    const isDescendant = (folderId, potentialAncestorId) => {\r\n      const folder = folders.find(f => f.id === folderId);\r\n      if (!folder || !folder.parentFolderId) return false;\r\n      if (folder.parentFolderId === potentialAncestorId) return true;\r\n      return isDescendant(folder.parentFolderId, potentialAncestorId);\r\n    };\r\n\r\n    return sourceId !== targetId && !isDescendant(targetId, sourceId);\r\n  }\r\n\r\n  // Calculate folder size (including subfolders)\r\n  calculateFolderSize(folder, allFolders, allDocuments) {\r\n    let size = 0;\r\n\r\n    // Add size of documents in this folder\r\n    const folderDocuments = allDocuments.filter(doc => doc.parentFolderId === folder.id);\r\n    size += folderDocuments.reduce((sum, doc) => sum + (doc.size || 0), 0);\r\n\r\n    // Recursively add size of subfolders\r\n    const subFolders = allFolders.filter(f => f.parentFolderId === folder.id);\r\n    subFolders.forEach(subFolder => {\r\n      size += this.calculateFolderSize(subFolder, allFolders, allDocuments);\r\n    });\r\n\r\n    return size;\r\n  }\r\n\r\n  // Get folder statistics\r\n  getFolderStats(folder, allFolders, allDocuments) {\r\n    const getDescendantFolders = (folderId) => {\r\n      const children = allFolders.filter(f => f.parentFolderId === folderId);\r\n      let descendants = [...children];\r\n      \r\n      children.forEach(child => {\r\n        descendants = [...descendants, ...getDescendantFolders(child.id)];\r\n      });\r\n      \r\n      return descendants;\r\n    };\r\n\r\n    const descendantFolders = getDescendantFolders(folder.id);\r\n    const allFolderIds = [folder.id, ...descendantFolders.map(f => f.id)];\r\n    \r\n    const totalDocuments = allDocuments.filter(doc => \r\n      allFolderIds.includes(doc.parentFolderId)\r\n    );\r\n\r\n    return {\r\n      totalFolders: descendantFolders.length,\r\n      totalDocuments: totalDocuments.length,\r\n      totalSize: totalDocuments.reduce((sum, doc) => sum + (doc.size || 0), 0),\r\n      lastModified: Math.max(\r\n        folder.updatedAt || 0,\r\n        ...totalDocuments.map(doc => doc.updatedAt || 0)\r\n      )\r\n    };\r\n  }\r\n}\r\n\r\nexport default new FolderService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}